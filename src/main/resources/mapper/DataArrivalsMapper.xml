<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--客户映射 指定到dao接口 -->
<mapper namespace="com.nanjing.weather.dao.DataArrivalsMapper">

    <select id="findAllType" resultType="com.nanjing.weather.domain.DataArrivals" parameterType="map">
         select * from data_arrivals WHERE product_type_code =#{type} ORDER BY routine_time DESC limit #{begin},#{pageSize}
    </select>

    <select id="findAllTypeAndTime" resultType="com.nanjing.weather.domain.DataArrivals" parameterType="map">
       select * from data_arrivals WHERE routine_time between #{startTime} and #{endTime} AND product_type_code =#{type}
        ORDER BY routine_time DESC limit #{begin},#{pageSize};
    </select>

    <select id="findByType" resultType="com.nanjing.weather.domain.DataArrivals" parameterType="map">
         select * from data_arrivals WHERE product_type_code =#{type}AND product_region_code= #{regionCode}
        ORDER BY routine_time DESC limit #{begin},#{pageSize}
    </select>

    <select id="findByTiming" resultType="com.nanjing.weather.domain.DataArrivals" parameterType="map">
      select * from data_arrivals WHERE  RIGHT(routine_time,5)='00:00'  and product_type_code =#{type}
      AND product_region_code=#{regionCode} ORDER BY routine_time DESC limit #{begin},#{pageSize};

    </select>


    <select id="findByHalfTime" resultType="com.nanjing.weather.domain.DataArrivals" parameterType="map">

     select * from data_arrivals WHERE  (RIGHT(routine_time,5)='30:00' or RIGHT(routine_time,5)='00:00') and product_type_code =#{type}
     AND product_region_code=#{regionCode}ORDER BY routine_time DESC limit #{begin},#{pageSize};

    </select>

    <select id="findCount" resultType="long" parameterType="map">
        select count(1) from data_arrivals WHERE product_type_code =#{type}
    </select>

    <select id="findCount1" resultType="long" parameterType="map">
        select count(1) from data_arrivals WHERE routine_time between #{startTime} and #{endTime} and product_type_code =#{type}
    </select>

    <select id="findByTypeAndTime" resultType="com.nanjing.weather.domain.DataArrivals" parameterType="map">
        select * from data_arrivals WHERE routine_time between #{startTime} and #{endTime} AND product_type_code =#{type}
        AND product_region_code=#{regionCode}ORDER BY routine_time DESC limit #{begin},#{pageSize};
    </select>

    <select id="findMaxTime" resultType="com.nanjing.weather.entity.DataArrival" >
        SELECT product_type_code AS productTypeCode,MAX(routine_time) routineTime FROM data_arrivals GROUP BY product_type_code;
    </select>

    <resultMap id="findStateMap" type="com.nanjing.weather.domain.DataState">
        <result column="product_category_code" property="productCategoryCode"/>
        <result column="name" property="productTypeCode"/>
        <collection property="dataArrivalLitter" ofType="com.nanjing.weather.domain.DataArrivalLitter">
            <result column="routine_time" property="routineTime"/>
            <collection property="centerDataArrival" ofType="com.nanjing.weather.domain.CenterDataArrival">
                <result column="product_region_code" property="productRegionCode"/>
                <result column="timeliness_code" property="timeliessCode"/>
                <result column="description" property="description"/>
                <result column="begin_sync_time" property="beginSyncTime"/>
                <result column="end_sync_time" property="endSyncTime"/>
            </collection>
        </collection>
    </resultMap>

    <select id="findState" parameterType="String" resultMap="findStateMap">
        /*select * from data_arrivals WHERE routine_time BETWEEN (SELECT date_sub(NOW(),interval 1 hour)) and NOW() ORDER BY routine_time;*/
        /*select * from data_arrivals WHERE routine_time BETWEEN (SELECT date_sub((SELECT MAX(routine_time) from data_arrivals),interval 1 hour)) and (SELECT MAX(routine_time) from data_arrivals) ORDER BY routine_time;*/
        SELECT
            *
        FROM
            data_arrivals da
            LEFT JOIN product_types pt ON da.product_type_code = pt.`code`
        WHERE
            product_category_code = 'qi-xiang-liu-yao-su'
            AND product_type_code IN ( 'ground_temperature', 'humidity', 'rainfall', 'wind', 'temperature', 'pressure' )
            AND routine_time BETWEEN ( SELECT date_sub( #{0}, INTERVAL 1 HOUR ) )
            AND #{0}
        ORDER BY
	        routine_time;
    </select>

    <resultMap id="findRoutineMap" type="com.nanjing.weather.domain.DataState">
        <result column="product_category_code" property="productCategoryCode"/>
        <result column="name" property="productTypeCode"/>
        <collection property="dataArrivalLitter" ofType="com.nanjing.weather.domain.DataArrivalLitter">
            <result column="routine_time" property="routineTime"/>
            <collection property="centerDataArrival" ofType="com.nanjing.weather.domain.CenterDataArrival">
                <result column="product_region_code" property="productRegionCode"/>
                <collection property="lastDataArrivals" ofType="com.nanjing.weather.domain.LastDataArrival">
                    <result column="timeliness_code" property="timelinessCode"/>
                    <result column="description" property="description"/>
                </collection>
            </collection>
        </collection>
    </resultMap>

    <select id="findRoutineData" resultMap="findRoutineMap">
        SELECT
            routine_time,
            product_category_code,
            product_region_code,
            product_type_code,
            timeliness_code,
            `code`,
            `name`,
            sequence
        FROM
            data_arrivals da
            LEFT JOIN product_categories pc ON da.product_category_code = pc.`code`
        WHERE
            routine_time BETWEEN ( SELECT date_sub( #{0}, INTERVAL 2 HOUR ) )
            AND #{0}
            AND product_category_code IN ( 'gps/met', 'ji-guang-lei-da', 'wei-bo-fu-she', 'yu-di-pu' , 'feng-kuo-xian')
        ORDER BY
            routine_time
    </select>

    <select id="findNotRoutine" resultMap="findRoutineMap">
        SELECT
            routine_time,
            product_category_code,
            product_region_code,
            product_type_code,
            timeliness_code,
            `code`,
            `name`,
            sequence
        FROM
            data_arrivals da
            LEFT JOIN product_categories pc ON da.product_category_code = pc.`code`
        WHERE
            routine_time BETWEEN ( SELECT date_sub( #{0}, INTERVAL 1 HOUR ) )
            AND #{0}
            AND product_category_code IN ( 'gps/met', 'ji-guang-lei-da', 'wei-bo-fu-she', 'yu-di-pu')
        ORDER BY
            routine_time
    </select>

    <select id="findWindData" resultMap="findRoutineMap">
        SELECT
            routine_time,
            product_category_code,
            product_region_code,
            product_type_code,
            timeliness_code,
            `code`,
            `name`,
            sequence
        FROM
            data_arrivals da
            LEFT JOIN product_categories pc ON da.product_category_code = pc.`code`
        WHERE
            routine_time BETWEEN ( SELECT date_sub( #{0}, INTERVAL 1 HOUR ) )
            AND #{0}
            AND product_category_code = 'feng-kuo-xian'
        ORDER BY
            routine_time
    </select>

    <select id="findMaxByProductCategory" parameterType="String" resultType="com.nanjing.weather.entity.DataArrival">
        SELECT product_type_code as productTypeCode, routine_time as routineTime FROM data_arrivals WHERE product_type_code = #{0} ORDER BY routine_time DESC LIMIT 0,1
    </select>
</mapper>